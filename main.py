from datetime import datetime, timedelta
from io import BytesIO
from time import sleep, time

import PIL.Image
import requests
import telebot
from telebot import types

import data
import deepmind
import fusionbrain

bot = telebot.TeleBot('6701320890:AAEikVAmXiNgfoLYaeK01VSJ3bghoGYKeTY')
consolebot = telebot.TeleBot('6863223235:AAGaQ7RdJuW4NlNn5k-tvFTBm7HwX-bdoD0')
data = data.Database()
last_command_time = {}
last_message = {}
ai = deepmind.DeepMind('AIzaSyCQyNOv4RcZF8os4wRUuRBNqabcROdIQKI')


# Command /start
@bot.message_handler(commands=['start'])
def start_message(message):
  start_param = message.text.split(' ')[1] if len(
      message.text.split(' ')) > 1 else None

  if start_param == "premium":
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–µ–º–∏—É–º!')
    bot.send_message(message.chat.id, 'ü•≥', disable_notification=True)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?')
    #premium_users[user_id] = True
  #elif user_id in premium_users:
  #bot.send_message(message.chat.id, 'üëã')
  #bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —á–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?')
  else:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, 'üëã', disable_notification=True)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.')


# Command /img
@bot.message_handler(commands=['img'])
def img_command(message):
  bot.send_message(message.chat.id, '‚ú®', disable_notification=True)
  msg = bot.send_message(
      message.chat.id,
      '–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ \n\n/cansel - –¥–ª—è –æ—Ç–º–µ–Ω—ã'
  )
  bot.register_next_step_handler(msg, ask_description)


def ask_description(message):
  chat_id = message.chat.id
  if len(message.text) < 5:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id,
                     '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ - 5 —Å–∏–º–≤–æ–ª–æ–≤.')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ /img, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return
  if len(message.text) > 1000:
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id,
                     '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ - 1000 —Å–∏–º–≤–æ–ª–æ–≤.')
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ /img, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return
  elif message.text == '/cansel':
    bot.send_message(chat_id,
                     "–í–≤–µ–¥–∏—Ç–µ /img, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return
  markup = types.InlineKeyboardMarkup(row_width=1)
  button1 = types.InlineKeyboardButton(text="–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π", callback_data="0")
  button2 = types.InlineKeyboardButton(text="–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ",
                                       callback_data="1")
  button3 = types.InlineKeyboardButton(text="–ê–Ω–∏–º–µ", callback_data="2")
  button4 = types.InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="3")
  markup.add(button1, button2, button3, button4)
  bot.send_message(chat_id,
                   "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:",
                   reply_markup=markup,
                   reply_to_message_id=message.message_id)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
  if call.message and call.message.text.startswith("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:"):
    chat_id = call.message.chat.id
    text_style = ""
    style = call.data

    if style == '0':
      text_style = "–ö–∞–Ω–¥–∏–Ω—Å–∫–∏–π"
    elif style == '1':
      text_style = "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ"
    elif style == '2':
      text_style = "–ê–Ω–∏–º–µ"
    elif style == '3':
      text_style = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=str("–í—ã –≤—ã–±—Ä–∞–ª—å —Å—Ç–∏–ª—å: " + text_style),
                          reply_markup=None)
    bot.answer_callback_query(callback_query_id=call.id,
                              show_alert=False,
                              text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!")

    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    description_text = call.message.reply_to_message.text

    bot.send_chat_action(chat_id, 'upload_photo')
    image = fusionbrain.draw_image(description_text, int(style))

    if image:
      bot.send_photo(
          chat_id,
          photo=image,
          caption='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ\n–í–≤–µ–¥–∏—Ç–µ /img, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
          reply_to_message_id=call.message.reply_to_message.message_id)
      user_id = call.message.reply_to_message.from_user.id
      data.add_img(user_id)
    else:
      bot.send_message(chat_id, 'üòî', disable_notification=True)
      bot.send_message(
          chat_id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–í–≤–µ–¥–∏—Ç–µ /img, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
  else:
    answer = call.data
    text = "***–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:***\n\n***Chat*** - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞, —Ç.–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n***Content*** - –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç"
    if answer == 'content':
      keyboard = types.InlineKeyboardMarkup()
      chat_button = types.InlineKeyboardButton(text="Chat", callback_data="chat")
      content_button = types.InlineKeyboardButton(text="‚ú®Content",
                                                  callback_data="content")
      keyboard.add(chat_button, content_button)
      bot.answer_callback_query(callback_query_id=call.id,
      show_alert=False,
      text="–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ content!")
      bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id, text = text,
        reply_markup=keyboard, parse_mode='markdown')
    if answer == 'chat':
      keyboard = types.InlineKeyboardMarkup()
      chat_button = types.InlineKeyboardButton(text="‚ú®Chat", callback_data="chat")
      content_button = types.InlineKeyboardButton(text="Content",
                                                  callback_data="content")
      keyboard.add(chat_button, content_button)
      bot.answer_callback_query(callback_query_id=call.id,
      show_alert=False,
      text="–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ chat!")
      bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id, text = text,
        reply_markup=keyboard, parse_mode='markdown')

# Command /help
@bot.message_handler(commands=['help'])
def help_message(message):
  help_text = '''
***–û –±–æ—Ç–µ***
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API Gemini –æ—Ç Google AI –∏ API Kandisky –æ—Ç Fusionbrain AI.
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Ç–∞ –≤–µ—Ä—Å–∏–∏ ***V1.3.3*** –ü—Ä–æ—Å—å–±–∞ ***–æ—à–∏–±–∫–∏*** –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å @F5key

***–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞***
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
/mode - –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
/img - –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
/reset - –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö.
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —è–∑—ã–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

***–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç?***
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Ç–æ –µ—Å—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥. –ö–æ–º–∞–Ω–¥–∞ /reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.

***–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π***
–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∑–∞–ø—Ä–æ—Å—É. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Gemini-Pro-Vision.

***–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π***
–í—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç /img. –ù–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ-–∫—Ä—É—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω—É–∂–µ–Ω —Ö–æ—Ä–æ—à–∏–π –∑–∞–ø—Ä–æ—Å. –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—á–∏—Ç–∞–π—Ç–µ [–Ω–∞—à—É —Å—Ç–∞—Ç—å—é](http://telegra.ph/Horoshie-prompty-dlya-generacii-kartinok-01-26)

***–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π***
–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî @F5key.
    '''
  bot.send_chat_action(message.chat.id, 'typing')
  bot.send_message(message.chat.id, help_text, parse_mode='Markdown', disable_web_page_preview = True)


# Command /reset
@bot.message_handler(commands=['reset'])
def reset_message(message):
  bot.send_chat_action(message.chat.id, 'typing')
  ai.clear_history()
  bot.send_message(message.chat.id, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!')


# Command /profile
@bot.message_handler(commands=['profile'])
def profile(message):
  try:
    user_id = message.from_user.id
    subscribe = str(data.get_subscribe(user_id))
    text_res = str(data.get_text(user_id))
    img_gen = str(data.get_img(user_id))
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(
        message.chat.id,
        f'***–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å***\n\nID: {user_id}\n–ü–æ–¥–ø–∏—Å–∫–∞: {subscribe}\n\n***–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞***\n–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {text_res}\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {img_gen}',
        parse_mode='Markdown')
  except Exception as e:
    bot.send_message(message.chat.id, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    print(f'!Error: {e}')


# Command /mode
@bot.message_handler(commands=['mode'])
def mode(message):
  bot.send_chat_action(message.chat.id, 'typing')
  bot.send_message(message.chat.id, 'Comming soon!')


# Command /settings
@bot.message_handler(commands=['settings'])
def settings_command(message):
  keyboard = types.InlineKeyboardMarkup()
  chat_button = types.InlineKeyboardButton(text="Chat", callback_data="chat")
  content_button = types.InlineKeyboardButton(text="Content",
                                              callback_data="content")
  keyboard.add(chat_button, content_button)
  bot.send_message(message.chat.id, "***–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:***\n\n***Chat*** - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞, —Ç.–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n***Content*** - –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç", reply_markup=keyboard, parse_mode='markdown')

# Text message
@bot.message_handler(func=lambda message: True)
def echo_message(message):
  if message.text.startswith('/'):
    if message.text in [
        '/settings', '/help', '/start', '/img', '/profile', '/mode', '/reset'
    ]:
      pass
    else:
      bot.send_chat_action(message.chat.id, 'typing')
      bot.send_message(message.chat.id, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã! –ü–æ–º–æ—â—å - /help')
  else:
    user_id = message.from_user.id
    if len(message.text) < 5:
      bot.send_chat_action(message.chat.id, 'typing')
      bot.send_message(message.chat.id,
                       '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ - 5 —Å–∏–º–≤–æ–ª–æ–≤.')
      return
    if user_id in last_message and last_message[user_id] == message.text:
      bot.send_chat_action(message.chat.id, 'typing')
      bot.send_message(message.chat.id,
                       '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.')
      return
    if user_id in last_command_time:
      last_time = last_command_time[user_id]
      elapsed_time = datetime.now() - last_time
      if elapsed_time < timedelta(seconds=1):
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(
            message.chat.id,
            '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')
        chat_id = message.chat.id
        until_date = int(time.time()) + 5
        bot.restrict_chat_member(chat_id, user_id, until_date=until_date)
        return

    user_id = message.from_user.id
    data.add_text(user_id)
    bot.send_chat_action(message.chat.id, 'typing')
    promt = message.text
    answer = ai.generate(promt)
    bot.send_message(message.chat.id, answer, parse_mode='markdown')
    last_command_time[user_id] = datetime.now()
    last_message[user_id] = message.text


# Photo message
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
  file_id = message.photo[-1].file_id
  file_info = bot.get_file(file_id)
  img_url = f'https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}'
  img_save = requests.get(img_url).content
  img = PIL.Image.open(BytesIO(img_save))

  if message.caption is not None:
    user_id = message.from_user.id
    data.add_text(user_id)
    bot.send_chat_action(message.chat.id, 'typing')
    response = str(message.caption)
    bot.send_message(message.chat.id,
                     ai.generate_content([response, img]),
                     parse_mode='markdown')
  else:
    user_id = message.from_user.id
    data.add_text(user_id)
    bot.send_chat_action(message.chat.id, 'typing')
    response = '–†–µ—à–∏ –∑–∞–¥–∞—á—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ'
    bot.send_message(message.chat.id,
                     ai.generate_content([response, img]),
                     parse_mode='markdown')


def send_message_console(message):
  consolebot.send_message(6441643574, message, parse_mode='markdown')


# Start the bot
if __name__ == "__main__":
  while True:
    try:
      print(" * Serving Telegram bot 'main.py'")
      dt = datetime.now()
      dt = dt.replace(microsecond=0)
      send_message_console(
          f"***Serving Telegram bot*** 'main.py' at\n ___{str(dt)}___")
      bot.polling()
    except Exception as e:
      print('!Fatal error: ' + str(e))
      dt = datetime.now()
      dt = dt.replace(microsecond=0)
      send_message_console(f'***!Fatal error:*** `{str(e)}` at\n ___{str(dt)}___')
      sleep(5)
